name: FastAPI CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

env:
  PYTHON_VERSION: '3.11'
  APP_NAME: FindMyRent-API

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio httpx

      - name: Run linting
        run: |
          pip install flake8
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        continue-on-error: true

      - name: Run tests with coverage
        run: |
          if [ -f "tests/__init__.py" ] || [ -f "test_*.py" ]; then
            pytest --cov=. --cov-report=xml --cov-report=html
          else
            echo "No tests found - skipping test execution"
          fi
        continue-on-error: true

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_SSH_PORT || 22 }}
          script: |
            # Navigate to application directory
            cd /home/ubuntu/FindMyRent-API
            
            # Pull latest changes
            echo "Pulling latest code from GitHub..."
            git fetch origin main
            git reset --hard origin/main
            
            # Activate virtual environment
            echo "Activating virtual environment..."
            source venv/bin/activate
            
            # Install/update dependencies
            echo "Installing dependencies..."
            pip install --upgrade pip
            pip install -r requirements.txt
            
            # Run database migrations if using Alembic
            if [ -f "alembic.ini" ]; then
              echo "Running database migrations..."
              alembic upgrade head
            fi
            
            # Restart the FastAPI service
            echo "Restarting FastAPI service..."
            sudo systemctl restart findMyRent-api.service
            
            # Check service status
            echo "Checking service status..."
            sudo systemctl status FindMyRent-API --no-pager
            
            # Wait for service to be ready
            echo "Waiting for service to be ready..."
            sleep 5
            
            # Health check
            echo "Performing health check..."
            curl -f http://localhost:8000/health || curl -f http://localhost:8000/ || echo "Warning: Health check failed"
            
            echo "Deployment completed successfully!"

      - name: Verify deployment
        run: |
          echo "Deployment to EC2 completed"
          echo "Application should be running at: http://${{ secrets.EC2_HOST }}"

      - name: Send deployment success email
        if: success()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp-relay.brevo.com
          server_port: 587
          username: ${{ secrets.MAIL_USERNAME }}
          password: ${{ secrets.MAIL_PASSWORD }}
          subject: "✅ Deployment Successful - ${{ github.repository }}"
          to: ${{ secrets.MAIL_TO }}
          from: ${{ secrets.MAIL_USERNAME }}
          body: |
            Deployment completed successfully!
            
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Commit Message: ${{ github.event.head_commit.message }}
            Author: ${{ github.actor }}
            
            Application URL: https://${{ secrets.EC2_HOST }}
            
            View workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          priority: normal

      - name: Send deployment failure email
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.MAIL_USERNAME }}
          password: ${{ secrets.MAIL_PASSWORD }}
          subject: "❌ Deployment Failed - ${{ github.repository }}"
          to: ${{ secrets.MAIL_TO }}
          from: ${{ secrets.MAIL_USERNAME }}
          body: |
            Deployment FAILED!
            
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Commit Message: ${{ github.event.head_commit.message }}
            Author: ${{ github.actor }}
            
            Please check the workflow logs for details.
            
            View workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          priority: high

  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    needs: deploy
    if: failure()
    
    steps:
      - name: Rollback to previous version
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_SSH_PORT || 22 }}
          script: |
            cd /home/ubuntu/FindMyRent-API
            
            echo "Rolling back to previous commit..."
            git reset --hard HEAD~1
            
            source venv/bin/activate
            pip install -r requirements.txt
            
            sudo systemctl restart FindMyRent-API
            
            echo "Rollback completed!"
